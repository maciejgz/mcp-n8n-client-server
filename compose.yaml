services:
  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    ports:
      - "127.0.0.1:5678:5678"
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_MCP_ENABLED=true
      - N8N_MCP_SERVERS='{"weather":{"command":"uv","args":["run","python","weather.py"],"cwd":"/mcp_servers/weather"}}'
    volumes:
      - n8n_data:/home/node/.n8n
      - ./local-files:/files
      - ./python_scripts:/python_scripts
      - ./mcp_servers:/mcp_servers
    depends_on:
      - mcp-server
      - weather-mcp-server

  mcp-server:
    build:
      context: ./mcp_servers/mix-server
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./mcp_servers/mix-server/data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  weather-mcp-server:
    build:
      context: ./mcp_servers/weather
      dockerfile: Dockerfile
    # No port mapping needed for stdio MCP server
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import weather; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  n8n_data:
  traefik_data: